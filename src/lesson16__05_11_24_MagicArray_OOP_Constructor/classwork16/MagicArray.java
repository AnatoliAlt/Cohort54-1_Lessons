package lesson16__05_11_24_MagicArray_OOP_Constructor.classwork16;

public class MagicArray {

    /*
    1. Добавлять в массив элементы (не думая об индексах и размере массива0)
    2. Динамическое изменение размера массива
    3. Возвращать строковое представление массива (какие элементы там есть)
    4. Добавляем в массив сразу несколько значений
    5. Текушее количество элементов в массиве
    6. Возвращает значение по индексу get(int index)
    7. Удалять элемент по индексу (Если индекс есть - удалит элемент - вернет удаленное значение)
    8. Поиск элемента по значению indexOf(int value) (определить есть ли в массиве элемент с таким значением)
    9. удалять элемент по значению boolean removeByValue(int value) (Если значение  есть - удалит элемент - вернет екгу tckb такое значение было)
     */

    // 1.
    int[] array; // Ссылачка на какойто массив целых чисел
    // 2. Указатель на пустую ячейку в массиве
    int cursor; // присвоенное значение по умолчанию - 0

    // 3. Создаем пустой конструктор
    public MagicArray() {
        array = new int[10];

    }

    // 6. Создаем метод. add - добавить (перевод с английского)
    void add(int value) { // 01:15:

        // 20. 02:04: Проверка. Есть ли свободное место во внутреннем массиве
        // Если места нет - нужно добавить место
        if (cursor == array.length - 1) {
            // Курсор указывает на последнюю свободную ячейку
            // 02:06: Расширить массив перед добавлением нового элемента 
            expandArray(); // 21. - вызов какогото метода. Метод который расширяет наш массив
        }

        array[cursor] = value;
        cursor++;
    }

    // 22.- (метод образуется автоматически от IDEA) Динамическое изменение размера массива
    void expandArray() {
        // 23.
        System.out.println("Расширяем массив! cursor: " + cursor);

        /*
        02:11:
        1. Создать массив большего размера (в два раза больше)
        2. Переписать в новый массив все значения из старого (до курсора)
        3. Перебросить ссылку
         */

        // 1.
        int[] newArray = new int[array.length * 2];

        // 2.
        for (int i = 0; i < cursor; i++) {
            newArray[i] = array[i]; // Переписываю все значения из старого массива в новый
        }
        // 02:20:
        // 3. Перебросить ссылку. Переменная array хранила ссылку на "новый" массив
        array = newArray;
        // 24. 02:23:30
        System.out.println("Расширение массива завершено");


    }

    // 16. Добавляем в массив сразу несколько значений
    void addAll(int... values) {// Три точки "..." означает, что он может принять не одно, а большое количество значений
        // с values я могу обращаться точно также, как со ссылкой на массив int
        System.out.println("Мы приняли несколько int-ов. А именно: " + values.length);
        System.out.println("У каждого значения есть индекс. Под индексом 0: " + values[0]);

        // 18.
        for (int i = 0; i < values.length; i++) {
            add(values[i]);
        }

    }
    //02:32:20
    // 25. Удаление элемента по индексу
    int remove(int index){
        /*
        1. Проверить валидность индекса и, что он не отрицательный и меньше курсора (cursor)
        2. Запомнить, какое значение находилось под этим индексом
        3. Удалить значение из ячейки
        4. Перелвинуть все элементы за индексом на 1 ячейку влево
        5. Передвинуть карсор влево
        6. Врнуть старое значение
         */

        // 27. Проверяем
        if ((index < 0 || index >= cursor)){
            // Индекс не валидный. То ничего в массиве не трогаем
            return Integer.MIN_VALUE; // Todo переписать потом
        }


        // 26.
        // 2. Запомнить значение
        int value = array[index];
        // 28.
        // 3. 4.
        for (int i = index; i < cursor; i++) {
            array[i] = array[i + 1];
            
        }
        cursor--;
        return value;
    }

    // 14. Текущее количества элементов в массиве
    int size() {
        return cursor;
    }

    // 9. 01:19:30
    // Возвращает строковое представление массива
    // [100, 200, 500]
    public String toString() {

        /*
        Открыть скобочку.
        Перебрать элементы. Добавить каждый элемент, добавить запятую (если элемент не последний)
        Закрыть скобочку
         */
        // 13. Если у нас нет текущих значений и cursor стоит на 0, то распечатываются только "[]"
        // А если cursor не на 0, то код будет формировать (распечатывать) строку
        if (cursor == 0) return "[]";

        // 10.
        String result = "[";
        for (int i = 0; i < cursor; i++) {
            result = result + array[i] + ((i < cursor - 1) ? ", " : "]");// Тернарный оператор

        }
        return result;
    }

}
